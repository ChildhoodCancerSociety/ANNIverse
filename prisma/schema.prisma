generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "postgresqlExtensions", "clientExtensions", "extendedWhereUnique", "jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserExpected {
  email     String    @id @unique
  role      Role
  phone     String?
  userId    String?   @unique
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  finalUser User? @relation(fields: [userId], references: [id])
}

model User {
  id             String        @id @default(cuid())
  handle         String?
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  emailCcs       String?
  phone          String?
  image          String?
  role           Role?
  onBoardingDone Boolean       @default(false)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  deletedAt      DateTime?
  accounts       Account[]
  sessions       Session[]
  expected       UserExpected?
  meetings       UserMeeting[]
  tasks          UserTask[]
  teams          UserTeam[]
}

model Team {
  id          String        @id @default(cuid())
  name        String
  description String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  tasks       Task[]
  meetings    TeamMeeting[]
  users       UserTeam[]
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  deadline    DateTime
  approved    Boolean    @default(false)
  status      String
  teamId      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  team        Team?      @relation(fields: [teamId], references: [id])
  users       UserTask[]
}

model Meeting {
  id          String        @id @default(cuid())
  title       String
  description String
  date        DateTime
  time        DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  teams       TeamMeeting[]
  users       UserMeeting[]
}

model UserMeeting {
  userId    String
  meetingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, meetingId])
}

model UserTask {
  userId    String
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, taskId])
}

model UserTeam {
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, teamId])
}

model TeamMeeting {
  meetingId String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@id([meetingId, teamId])
}

enum Role {
  PM
  Dev
  Admin
  Volunteer
}
