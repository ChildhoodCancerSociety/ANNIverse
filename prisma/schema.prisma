// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  //previewFeatures = ["jsonProtocol", "fullTextSearch", "fullTextIndex", "postgresqlExtensions", "extendedWhereUnique", "clientExtensions"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Schema
enum Role {
  PM
  Dev
  Admin
  Volunteer
}

model UserExpected {
  email String  @id @unique
  role  Role
  phone String?

  finalUser User?   @relation(fields: [userId], references: [id])
  userId    String? @unique

  revokedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum KudosTemplate {
  // Add template options here
  TEMPLATE1
  TEMPLATE2
  TEMPLATE3
  // etc...
}

model Kudos {
  id          String       @id @default(cuid())
  giverId     String       // Who is giving the kudos
  receiverId  String       // Who is receiving the kudos
  // template    KudosTemplate
  // text        String       // Custom text from PM
  image       String?      // Optional Image URL
  isPrivate   Boolean      @default(false) // Public by default, but can be marked private
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  giver       User         @relation("KudosGiver", fields: [giverId], references: [id])
  receiver    User         @relation("KudosReceiver", fields: [receiverId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  handle        String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  emailCcs      String?
  phone         String?
  image         String?
  role          Role?

  expected UserExpected?

  meetings UserMeeting[]
  tasks    UserTask[]
  teams    UserTeam[]

  accounts Account[]
  sessions Session[]

  givenKudos Kudos[] @relation("KudosGiver")
  receivedKudos Kudos[] @relation("KudosReceiver")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime?
}

model Team {
  id          String @id
  name        String
  description String
  users       UserTeam[]
  meetings    TeamMeeting[]
  tasks       Task[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  deadline    DateTime
  approved    Boolean    @default(false)
  status      String
  users       UserTask[]
  team        Team?      @relation(fields: [teamId], references: [id])
  teamId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meeting {
  id          String        @id @default(cuid())
  title       String
  description String
  date        DateTime
  time        DateTime
  users       UserMeeting[]
  teams       TeamMeeting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String @id @default (cuid())
}

// M:M Relational models
model UserMeeting {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, meetingId])
}

model UserTask {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, taskId])
}

model UserTeam {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, teamId])
}

model TeamMeeting {
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([meetingId, teamId])
}
