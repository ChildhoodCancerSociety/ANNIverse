// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PM
  SoftwareDev
  Admin
  Volunteer
}

model User {
  id         String @id @default(uuid())
  handle     String @unique // min 3 chars
  first_name String
  last_name  String
  email      String @unique
  role       Role

  meetings UserMeeting[]
  tasks    UserTask[]
  teams    UserTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          String        @id @default(uuid())
  name        String
  description String
  users       UserTeam[]
  meetings    TeamMeeting[]
  tasks       Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id             String     @id @default(uuid())
  title          String
  description    String
  deadline       DateTime
  approved       Boolean    @default(false)
  status         String
  assigned_users UserTask[]
  assigned_team  Team?      @relation(fields: [teamId], references: [id])
  teamId         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meeting {
  id          String        @id @default(uuid())
  title       String
  description String
  date        DateTime
  time        DateTime
  users       UserMeeting[]
  teams       TeamMeeting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ASSOCIATIONS

model UserMeeting {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, meetingId])
}

model UserTask {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, taskId])
}

model UserTeam {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, teamId])
}

model TeamMeeting {
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([meetingId, teamId])
}
